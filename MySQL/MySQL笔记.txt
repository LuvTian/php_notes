基础知识：
数据类型：字符型、整型、浮点型、日期时间型

数据表中的行称之为记录，列称之为字段

关键词与函数名称都要大写，数据库名称、表名称、字段名称都要小写
sql语句必须以分号结束

修改数据库配置文件my.cnf
default-character-set = utf8 修改数据库默认编码
default_storage_engine = InnoDB 修改数据表存储引擎
--------------------------------------------------------------------
约束：
约束保证数据的完整性和一致性
约束分为表级约束（针对两个或以上的字段来使用）和列级约束（只针对某一个字段使用）
约束按照功能分类：
    NOT NULL (非空约束)
    PRIMARY KEY (主键约束)
    UNIQUE KEY (唯一约束)
    DEFAULT (默认约束)
    FOREEIGN KEY (外键约束)




--------------------------------------------------------------------


1、创建、修改、删除数据库：
CREATE DATABASE database_name;
CREATE DATABASE database_name CHARACTER SET utf8; 创建指定编码的数据库

ALTER DATABASE db_name CHARACTER SET gbk; 修改数据库的编码


查看所有数据库列表；
SHOW DATABASES;

SHOW CREATE DATABASE database_name;
查看指定的数据库信息 包括数据库编码

删除指定数据库
DROP DATABASE db_name;

2、创建数据表：
CREATE TABLE [IF NOT EXISTS] table_name(
    column_name data_type NOT NULL,
    username VARCHAR(20),
    ...
);

column_name是字段名，也就是列，
data_type是数据类型,
NOT NULL是该字段属性，表示该字段值不允许为空，字段的默认属性是NULL可以省略不写
每行后面以逗号结尾，最后一行不需要逗号

SHOW CREATE TABLE table_name;
查看所创建数据表信息 包括数据表的存储引擎、编码

3、查看当前位于哪个数据库下：
SELECT DATABASE();


4、查看当前数据库的数据表：
SHOW TABLES;
查看指定数据库的数据表：
SHOW TABLES FROM db_name;

5、查看某数据表结构（查看表的字段）：
SHOW COLUMNS FROM table_name;
或者  DESC table_name;
------------------------------------------------------------------------------------------
对记录的操作主要是增删改查：INSERT DELETE UPDATE SELECT
增删改称为写 查称为读

6、插入记录，增加行数据：
INSERT [INTO] table_name [(column_name,...)] VALUES(val,...);
如果column_name省略，那么必须给所有的字段都赋值(如果有自增的字段比如id 其值可以赋为NULL或者DEFAULT)，不管字段名是否省略字段名和其值必须对应。
VALUES的值的类型可以是表达式，函数
如果要同时插入多条记录VALUES后面的括号以逗号分隔

第二种插入记录的方式
INSERT [INTO] table_name SET colunm_name1="",colunm_name2=""...
与第一种方式的区别在于，此方法可以使用子查询

第三种插入记录的方式
此方法可以将查询(SELECT)的结果插入到指定的数据表
insert table_name [(colname...)] select.....
INSERT test (`username`) SELECT `username` FROM users WHERE age>25; //从users表里取出数据插入到test表中，注意字段要对应
INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;//将子查询分类结果写入表中

修改更新记录UPDATE
UPDATE users set age=age+5; 更新单列
UPDATE users set age=age-id,sex=0; 更新多列
UPDATE users set age=age+10 WHERE id%2=0; 限制条件的更新 id%2=0是选择id为偶数的行

删除记录DELETE
DELETE FROM tb_name [WHERE 条件]
DELETE FROM users WHERE id=6;


查询记录 SELECT 查询表达式
SELECT VERSION();
SELECT NOW();
SELECT id,username FROM usres; //查询指定字段(*号表示所有字段)（查询表达式的顺序将影响查询结果集的顺序）
等同于SELECT users.id,users.username FROM users;

查询表达式
SELECT username AS uname,password AS pwd FROM users; //别名查询，会影响查询结果集中的字段名

对查询结果分组
SELECT sex FROM users GROUP BY sex;

对查询结果进行排序
SELECT * FROM users ORDER BY age ASC; 按照年龄升序排序，默认是ASC DESC是降序

限制查询结果所返回的数量 LIMIT
SELECT * FROM users LIMIT 2; //返回两条记录
SELECT * FROM users LIMIT 2,4; //从第2位开始(从0开始计算的) 返回4条记录

查询多个值
SELECT * FROM table_name WHERE column_name IN (value1,value2,...)


子查询(subquery)
子查询指嵌套在查询内部，且必须始终出现在圆括号内。
子查询可以包含多个关键字或条件，如：DISTINCT / GROUP BY / ORDER BY / LIMIT / 函数等。
子查询的外层查询可以是：SELECT, INSERT, UPDATE , SET 或DO
子查询返回的结果可以是：标量、一行、一列或子查询
SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price>=(SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);



CREATE .. SELECT ..
创建表的同时把其他表的内容插入进来：
CREATE TABLE tdb_goods_brands(
brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
brand_name VARCHAR(40) NOT NULL)
SELECT brand_name FROM tdb_goods GROUP BY brand_name;

更新多表
UPDATE tdb_goods INNER JOIN tdb_goods_brands ON tdb_goods.brand_name=tdb_goods_brands.brand_name SET tdb_goods.brand_name=tdb_goods_brands.brand_id;

修改表的多个字段和字段属性
ALTER TABLE tdb_goods CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;

表连接
内连接 .. INSER JOIN .. ON
左外连接 .. LEFT JOIN .. ON
右外连接 .. RIGHT JOIN .. ON

------------------------------------------------------------------------------------------

7、自动编号(自增)：AUTO_INCREMENT
必须与主键组合使用,起始值为1
主键不一定必须和自动编号一起使用
为自动编号的字段在插入记录的时候不需要进行赋值
如果没有自动编号属性的主键字段是可以赋值的，但不能重复


----------------------------------------------------------------------------
约束：

约束分为表级约束和列级约束

对一个数据列建立的约束（只约束一个字段）叫做列级约束，既可以在列定义时声明，也可以在列定义后声明，实际操作用列级约束用的多
对多个数据列建立的约束（约束两个或以上的约束）叫做表级约束，只能在列定义后声明

约束按功能可分类为：
NOT NULL(非空约束)
PRIMARY KEY(主键约束)
UNIQUE KEY(唯一约束)
DEFAULT(默认约束)
FOREIGN KEY(外键约束)

8、主键：PRIMARY KEY
主键约束
每张数据表只能存在一个主键
主键可以保证记录的唯一性
主键自动为NOT NULL

CREATE TABLE table_name(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(30) NOT NULL
);

9、唯一约束：UNIQUE KEY
唯一约束
唯一约束可以保证记录的唯一性
唯一约束的字段可以为空值(NULL)  NULL != NULL
每张数据表可以存在多个唯一约束

AUTO_INCREMENT + UNIQUE KEY 就相当于PRIMARY KEY

10、字段默认值 DEFAULT
默认约束
当插入记录时，如果没有明确为字段赋值，则自动赋予默认值
demo:
CREATE TABLE tb6(
id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(20) NOT NULL UNIQUE KEY,
sex ENUM ('1','2','3') DEFAULT '3'
);
INSERT tb6 (username) VALUES('Tom'); 插入一条记录，不设置sex的值
SELECT * FROM tb6; 可以发现上面这条记录的sex字段有默认值3

11、外键约束
保持数据的一致性、完整性
实现一对一或一对多关系
外键约束的要求：
父表(子表所参照的表)和子表(具有外键列的表)必须使用相同的存储引擎，而且禁止使用临时表。
数据表的存储引擎只能为InnoDB。在MySQL配置文件里配置default-storage-engine=INNODB
外键列(加了FOREIGN关键字的列)和参照列(外键列所参照的列)必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同。
外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL将自动创建索引。

CREATE TABLE provinces( -->父表
id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, -->参照列
pname VARCHAR(20) NOT NULL
);

CREATE TABLE users( -->子表
id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(20) NOT NULL,
pid SMALLINT UNSIGNED, -->外键列
FOREIGN KEY (pid) REFERENCES provinces (id)
);

----------------------------------------------------------------------------


12、查询记录
SELECT * FROM table_name;

13、导出备份数据库
mysqldump -u root -p --all-databases > databases.sql
mysqldump -uroot -p www_rehack_cn > /var/www/www_rehack_cn.sql 备份指定数据库到指定目录下
注意这里是数据库的用户名和密码不是服务器的。

ls查看一下有没有生成databases.sql文件

14、导入sql文件
use db_name;
source /www/xxx.sql
或者
mysql -uroot -p test < /var/www/www_rehack_cn.sql 将sql文件导入到指定的数据库

----------------------------------------------------------------------------

用户操作
GRANT ALL PRIVILEGES ON database_name.* TO username@'%' IDENTIFIED BY 'password'; 指定某个数据库 添加或授权一个用户名为username，密码为password，授权为% （%表示所有ip能连接，可以设置指定ip或者localhost）


GRANT ALL PRIVILEGES ON *.* TO rehack@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; 让rehack用户从任何ip（主机）远程连接到mysql服务器，建议不要给root用户这样的权限，*.* 这里前面的*号表示所有的数据库，后面的*号表示所有的权限

update user set password = password('x123456.') where user='root'; //设置root用户密码

FLUSH PRIVILEGES; 刷新数据库权限


use mysql;
SELECT host,user,password FROM user; 查看mysql数据库用户

删除多余用户
mysql> delete from mysql.user where user=' ';
mysql> delete from mysql.user where host='::1';
mysql> delete from mysql.user where host='xxx';

----------------------------------------------------------------------------
修改表

添加字段（列）：
ALTER TABLE table_name ADD ziduan_name smallint unsigned;

添加外键约束：ALTER TABLE users2 ADD FOREIGN KEY(pid) REFERENCES provinces (id);

添加默认约束：ALTER TABLE users2 ALTER age SET DEFAULT 15;

删除默认约束：ALTER TABLE users2 ALTER age DROP DEFAULT;

数据表的修改操作：无非就是添加列，删除列，添加约束，删除约束。用的是ALTER，而INSERT是对数据表添加插入记录用的。


----------------------------------------------------------------------------
字符函数
字符连接    SELECT CONCAT(first_name,last_name) AS fullname FROM user;
指定分隔符的字符连接  SELECT CONCAT('-','A','B','C'); => A-B-C
模式匹配 [NOT] LIKE  %代表任意个字符 _代表任意一个字符
----------------------------------------------------------------------------
数据类型
id字段使用smallint
日期时间使用init(10)  使用from_unixtime()将int类型时间戳转换为日期,使用UNIX_TIMESTAMP()将日期转换为int时间戳
使用简单数据类型，int比varchar类型在mysql处理上简单
尽可能使用not null 定义字段，设置默认值
尽量少用text类型
使用bigint存储IP地址,使用inet_aton将IP地址转化为bigint,使用inet_ntoa将bigint转换为IP地址
年龄使用tinyint
金钱数字使用decimal
手机号用char(11)
密码char(32) 需要md5加密
----------------------------------------------------------------------------
查询字段里包含某字符串的表名
 select distinct table_name from information_schema.columns where column_name in('id');

----------------------------------------------------------------------------
经验总结：

1.在使用sum函数的时候，如果where条件不成立的时候，也会返回一条记录，这条记录的值都是null
为了不出现这条无效的结果，可以在mysql语句后面加上GROUP BY NULL
在php里测试是可以的，但在navicat工具里测试还是会返回一条记录

2.在where后面不能跟sum函数(where里面不能使用聚合函数)，可以用having代替
where 条件 group by 字段

having 集合判断,用having的时候 group by要放在having的前面

----------------------------------------------------------------------------
